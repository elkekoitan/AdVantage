module.exports = {
  preset: 'react-native',
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
  transformIgnorePatterns: [
    'node_modules/(?!((jest-)?react-native|@react-native(-community)?)|expo(nent)?|@expo(nent)?/.*|react-navigation|@react-navigation/.*|@unimodules/.*|unimodules|sentry-expo|native-base|@native-base/.*|isows|@supabase/.*)',
  ],
  testMatch: [
    '**/__tests__/**/*.(ts|tsx|js)',
    '**/*.(test|spec).(ts|tsx|js)',
  ],
  collectCoverageFrom: [
    'src/**/*.{ts,tsx}',
    '!src/**/*.d.ts',
    '!src/types/**/*',
    '!src/**/__tests__/**/*',
    '!src/**/*.test.*',
    '!src/**/*.spec.*',
  ],
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
    '^@components/(.*)$': '<rootDir>/src/components/$1',
    '^@screens/(.*)$': '<rootDir>/src/screens/$1',
    '^@navigation/(.*)$': '<rootDir>/src/navigation/$1',
    '^@services/(.*)$': '<rootDir>/src/services/$1',
    '^@hooks/(.*)$': '<rootDir>/src/hooks/$1',
    '^@store/(.*)$': '<rootDir>/src/store/$1',
    '^@utils/(.*)$': '<rootDir>/src/utils/$1',
    '^@types/(.*)$': '<rootDir>/src/types/$1',
    '^@assets/(.*)$': '<rootDir>/assets/$1',
    'react-dom': 'react-native',
    'expo-font': '<rootDir>/__mocks__/expo-font.js',
    '@expo/vector-icons': '<rootDir>/__mocks__/@expo/vector-icons.js',
    'expo/virtual/env': '<rootDir>/__mocks__/expo-virtual-env.js',
    '@react-native-async-storage/async-storage': '<rootDir>/__mocks__/@react-native-async-storage/async-storage.js',
    'expo-secure-store': '<rootDir>/__mocks__/expo-secure-store.js',
    'fs': '<rootDir>/__mocks__/fs.js',
  },
  testEnvironment: 'node',
  setupFiles: ['<rootDir>/jest.setup.early.js'],
  modulePathIgnorePatterns: ['<rootDir>/build/'],
  testTimeout: 10000,
  globals: {
    __DEV__: true,
    process: {
      env: {
        EXPO_PUBLIC_SUPABASE_URL: 'mock_supabase_url',
        EXPO_PUBLIC_SUPABASE_ANON_KEY: 'mock_supabase_anon_key',
      },
    },
  },
};