name: AdVantage CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npm run type-check
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build App
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Setup Expo CLI
      run: npm install -g @expo/cli
    
    - name: Build for preview
      run: npx expo export --platform all
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: expo-build
        path: dist/
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run npm audit
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Setup Expo CLI
      run: npm install -g @expo/cli
    
    - name: Login to Expo
      run: npx expo login --non-interactive
      env:
        EXPO_CLI_PASSWORD: ${{ secrets.EXPO_CLI_PASSWORD }}
        EXPO_USERNAME: ${{ secrets.EXPO_USERNAME }}
    
    - name: Publish to Expo (Preview)
      run: npx expo publish --release-channel=preview
      env:
        EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
        EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}
        EXPO_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY }}
        EXPO_PUBLIC_GOOGLE_GEMINI_API_KEY: ${{ secrets.EXPO_PUBLIC_GOOGLE_GEMINI_API_KEY }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Setup Expo CLI
      run: npm install -g @expo/cli
    
    - name: Login to Expo
      run: npx expo login --non-interactive
      env:
        EXPO_CLI_PASSWORD: ${{ secrets.EXPO_CLI_PASSWORD }}
        EXPO_USERNAME: ${{ secrets.EXPO_USERNAME }}
    
    - name: Publish to Expo (Staging)
      run: npx expo publish --release-channel=staging
      env:
        EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
        EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}
        EXPO_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY }}
        EXPO_PUBLIC_GOOGLE_GEMINI_API_KEY: ${{ secrets.EXPO_PUBLIC_GOOGLE_GEMINI_API_KEY }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Setup Expo CLI
      run: npm install -g @expo/cli
    
    - name: Login to Expo
      run: npx expo login --non-interactive
      env:
        EXPO_CLI_PASSWORD: ${{ secrets.EXPO_CLI_PASSWORD }}
        EXPO_USERNAME: ${{ secrets.EXPO_USERNAME }}
    
    - name: Build for production
      run: npx expo build:android --release-channel=production
      env:
        EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
        EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}
        EXPO_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.EXPO_PUBLIC_GOOGLE_MAPS_API_KEY }}
        EXPO_PUBLIC_GOOGLE_GEMINI_API_KEY: ${{ secrets.EXPO_PUBLIC_GOOGLE_GEMINI_API_KEY }}
    
    - name: Deploy to Coolify
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.COOLIFY_HOST }}
        username: ${{ secrets.COOLIFY_USERNAME }}
        key: ${{ secrets.COOLIFY_SSH_KEY }}
        script: |
          cd /app/advantage
          git pull origin main
          docker-compose down
          docker-compose up -d --build
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install Supabase CLI
      run: npm install -g supabase
    
    - name: Run Database Migrations
      run: |
        supabase db push --db-url=${{ secrets.SUPABASE_DB_URL }}
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }} 